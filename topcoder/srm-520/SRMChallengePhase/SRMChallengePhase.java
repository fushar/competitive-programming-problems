import java.util.*;

public class SRMChallengePhase
{
	final int MOD = 1000000007;

	public int func(int N, int both, int challenger, int challengee){
		int M=2510,i,j;
		
		if(challenger < challengee) return 0;
		
		int dp[][] = new int[M][M];
		for(i=0;i<M;i++) for(j=0;j<=i;j++){
			dp[i][j] = 0;
			if(j == 0) {dp[i][j] = 1; continue;}
			if(j <= i-1) dp[i][j] = dp[i-1][j];
			if(j >= 1 && j < i) dp[i][j] = (int)((dp[i][j] + (long)j * dp[i-1][j-1] % MOD * (i-j) % MOD) % MOD);
		}
		
		int C[][] = new int[M][M];
		for(i=0;i<M;i++) for(j=0;j<=i;j++){
			if(j == 0 || j == i) C[i][j] = 1;
			else C[i][j] = (C[i-1][j-1] + C[i-1][j]) % (int)MOD;
		}
		
		long ans = (long)dp[both+challenger][both] * C[challenger][challengee] % MOD;
		for(i=1;i<=challenger;i++) ans = ans * i % MOD;
		for(i=1;i<=challengee;i++) ans = ans * i % MOD;
		for(i=0;i<challenger-challengee;i++) ans = ans * (N-1) % MOD;
		
		return (int)ans;
	}

	public int rng_58(String[] attempted, String[] challenged){
		int i;
		
		String s = "";
		for(i=0;i<attempted.length;i++) s += attempted[i];
		String t = "";
		for(i=0;i<challenged.length;i++) t += challenged[i];
		
		int N = s.length();
		int both = 0, challenger = 0, challengee = 0;
		for(i=0;i<N;i++){
			if(s.charAt(i) == 'Y' && t.charAt(i) == 'Y') both++;
			else if(s.charAt(i) == 'Y') challenger++;
			else if(t.charAt(i) == 'Y') challengee++;
		}
		
		int ans = func(N,both,challenger,challengee);
		return ans;
	}
	
	
	public int countWays(String[] codersAttempted, String[] codersChallenged)
	{
		int N;
		String attempted = "";
		for (int i = 0; i < codersAttempted.length; i++)
			attempted += codersAttempted[i];
		String challenged = "";
		for (int i = 0; i < codersChallenged.length; i++)
			challenged += codersChallenged[i];
			
		N = attempted.length();
		
		int Cr = 0, Ce = 0, S = 0;
		for (int i = 0; i < N; i++)
			if (attempted.charAt(i) == 'Y' && challenged.charAt(i) == 'Y')
				S++;
			else if (attempted.charAt(i) == 'Y')
				Cr++;
			else if (challenged.charAt(i) == 'Y')
				Ce++;
		
		if (Cr < Ce)
			return 0;
		
		int[][] comb = new int[N+1][N+1];
		for (int i = 0; i <= N; i++)
		{
			comb[i][0] = 1;
			for (int j = 1; j <= i; j++)
				comb[i][j] = (comb[i-1][j] + comb[i-1][j-1]) % MOD;
		}
		
		int[][] dp = new int[N+1][N+1];
		dp[0][0] = 1;
		for (int a = 1; a <= N; a++)
		for (int b = 0; b <= N; b++)
		{
			dp[a][b] = dp[a-1][b];
			if (b > 0)
			{
				long add = ((long)dp[a-1][b-1] * (a-b)) % MOD;
				dp[a][b] = (int)((dp[a][b] + add) % MOD);
			}
		}
		
		long res = dp[Cr+S][S];
		res = (res * comb[Cr][Ce]) % MOD;
		for (int i = 1; i <= Cr; i++)
			res = (res * i) % MOD;
		for (int i = 1; i <= Ce; i++)
			res = (res * i) % MOD;
		for (int i = 1; i <= S; i++)
			res = (res * i) % MOD;
		for (int i = 1; i <= Cr-Ce; i++)
			res = (res * (N-1)) % MOD;
		return (int)res;		
	}
	
	public String checkData(String[] codersAttempted, String[] codersChallenged)
	{
		String attempted = "";
		for (int i = 0; i < codersAttempted.length; i++)
			attempted += codersAttempted[i];
		String challenged = "";
		for (int i = 0; i < codersChallenged.length; i++)
			challenged += codersChallenged[i];
		
		boolean good = true;
		
		for (int i = 0; i < codersAttempted.length; i++)
		{
			int l = codersAttempted[i].length();
			if (l < 1 || l > 50)
				good = false;
		}
		
		for (int i = 0; i < codersChallenged.length; i++)
		{
			int l = codersChallenged[i].length();
			if (l < 1 || l > 50)
				good = false;
		}
		
		if (!good)
			return "Each element of both codersAttempted and codersChallenged must contain between 1 and 50 characters, inclusive.";
		
		int A = codersAttempted.length;
		int C = codersChallenged.length;
		
		if (A < 1 || A > 50 || C < 1 || C > 50)
			return "codersAttempted and codersChallenged must both contain between 1 and 50 elements, inclusive.";
		
		System.out.println("A = " + attempted.length());
		System.out.println("A = " + challenged.length());
		
		if (attempted.length() != challenged.length())
			return "codersAttempted and codersChallenged must contain the same number of characters.";
		
		int N = attempted.length();
		
		good = true;
		for (int i = 0; i < N; i++)
		{
			if (attempted.charAt(i) != 'Y' && attempted.charAt(i) != 'N')
				good = false;
			if (challenged.charAt(i) != 'Y' && challenged.charAt(i) != 'N')
				good = false;
		}
		
		if (!good)
			return "Each character in both codersAttempted and codersChallenged must be 'Y' or 'N'.";
		return "";
	}
	
	public static void main(String[] args)
	{
		SRMChallengePhase solver = new SRMChallengePhase();
		
		String[] codersAttempted = {"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"};
		String[] codersChallenged = {};
		
		System.out.println(solver.countWays(codersAttempted, codersChallenged));
		System.out.println(solver.rng_58(codersAttempted, codersChallenged));
	}
}
